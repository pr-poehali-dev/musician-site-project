import { useState, useEffect, useRef } from 'react';
import { Album, Track } from '@/types';
import { apiClient } from '@/utils/apiClient';
import { toast } from '@/hooks/use-toast';

const POLLING_INTERVAL = 5000; // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥

const defaultAlbums: Album[] = [
  { 
    id: "album1", 
    title: "–í–∏–Ω—Ç–∞–∂–Ω—ã–µ –ú–µ–ª–æ–¥–∏–∏", 
    artist: "Vintage Soul",
    tracks: 4, 
    price: 899, 
    cover: "/img/d10a9c15-7d7f-41eb-b586-bff4324f107a.jpg",
    description: "–ü–æ–ª–Ω—ã–π –∞–ª—å–±–æ–º –∞—Ç–º–æ—Å—Ñ–µ—Ä–Ω–æ–π –≤–∏–Ω—Ç–∞–∂–Ω–æ–π –º—É–∑—ã–∫–∏",
    trackList: [
      { id: "1", title: "Vintage Dreams", duration: "3:42", file: "", price: 129 },
      { id: "2", title: "Golden Memories", duration: "4:15", file: "", price: 129 },
      { id: "3", title: "Sunset Boulevard", duration: "3:28", file: "", price: 129 },
      { id: "4", title: "Old Soul", duration: "4:03", file: "", price: 129 }
    ]
  },
  { 
    id: "album2", 
    title: "–ó–æ–ª–æ—Ç—ã–µ –ì–æ–¥—ã", 
    artist: "Vintage Soul",
    tracks: 3, 
    price: 749, 
    cover: "/img/d10a9c15-7d7f-41eb-b586-bff4324f107a.jpg",
    description: "–ö–æ–ª–ª–µ–∫—Ü–∏—è –ª—É—á—à–∏—Ö —Ä–µ—Ç—Ä–æ –∫–æ–º–ø–æ–∑–∏—Ü–∏–π",
    trackList: [
      { id: "5", title: "Jazz Cafe Nights", duration: "5:12", file: "", price: 149 },
      { id: "6", title: "Midnight Train", duration: "4:33", file: "", price: 149 },
      { id: "7", title: "Blue Moon Rising", duration: "3:55", file: "", price: 149 }
    ]
  }
];

export const useAlbumManagement = () => {
  const [albums, setAlbums] = useState<Album[]>(defaultAlbums);
  const pollingIntervalRef = useRef<NodeJS.Timeout | null>(null);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –∞–ª—å–±–æ–º–æ–≤ —Å –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º
  const loadAlbums = async () => {
    try {
      const serverAlbums = await apiClient.loadAlbumsFromServer();
      
      if (serverAlbums.length > 0) {
        setAlbums(serverAlbums);
        console.log('‚úÖ –ê–ª—å–±–æ–º—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ –ë–î:', serverAlbums.length);
      } else {
        setAlbums(defaultAlbums);
        console.log('‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –∞–ª—å–±–æ–º—ã');
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–ª—å–±–æ–º–æ–≤:', error);
      setAlbums(defaultAlbums);
    }
  };

  useEffect(() => {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–ª—å–±–æ–º—ã —Å—Ä–∞–∑—É
    loadAlbums();

    // –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ
    // pollingIntervalRef.current = setInterval(() => {
    //   loadAlbums();
    // }, POLLING_INTERVAL);

    // –°–ª—É—à–∞–µ–º —Å–æ–±—ã—Ç–∏—è –¥–ª—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    const handleAlbumsUpdate = () => {
      loadAlbums();
    };

    window.addEventListener('albumsUpdated', handleAlbumsUpdate);

    // –û—á–∏—Å—Ç–∫–∞
    return () => {
      // if (pollingIntervalRef.current) {
      //   clearInterval(pollingIntervalRef.current);
      // }
      window.removeEventListener('albumsUpdated', handleAlbumsUpdate);
    };
  }, []);

  const addNewAlbum = async (albumData: Omit<Album, 'id'>) => {
    try {
      const newAlbum: Album = {
        ...albumData,
        id: Date.now().toString()
      };
      console.log('–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∞–ª—å–±–æ–º–∞:', newAlbum);
      
      await apiClient.saveAlbumToServer(newAlbum);
      
      console.log('‚úÖ –ê–ª—å–±–æ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ, –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫...');
      await loadAlbums();
      
      toast({
        title: "‚úÖ –ê–ª—å–±–æ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω",
        description: `–ê–ª—å–±–æ–º "${newAlbum.title}" —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω`,
      });
      
      window.dispatchEvent(new CustomEvent('albumsUpdated'));
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∞–ª—å–±–æ–º–∞:', error);
      toast({
        title: "‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è",
        description: "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∞–ª—å–±–æ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö",
        variant: "destructive",
      });
      throw error;
    }
  };

  const editAlbum = async (albumId: string, albumData: Omit<Album, 'id'>) => {
    try {
      await apiClient.updateAlbumOnServer(albumId, albumData);
      
      await loadAlbums();
      
      toast({
        title: "‚úÖ –ê–ª—å–±–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω",
        description: "–ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö",
      });
      
      window.dispatchEvent(new CustomEvent('albumsUpdated'));
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∞–ª—å–±–æ–º–∞:', error);
      toast({
        title: "‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è",
        description: "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∞–ª—å–±–æ–º",
        variant: "destructive",
      });
    }
  };

  const removeAlbum = async (albumId: string) => {
    try {
      await apiClient.deleteAlbumFromServer(albumId);
      
      await loadAlbums();
      
      window.dispatchEvent(new CustomEvent('albumsUpdated'));
      window.dispatchEvent(new CustomEvent('tracksUpdated'));
      
      toast({
        title: "‚úÖ –ê–ª—å–±–æ–º —É–¥–∞–ª–µ–Ω",
        description: "–ê–ª—å–±–æ–º —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö",
      });
      
      console.log('‚úÖ –ê–ª—å–±–æ–º —É–¥–∞–ª–µ–Ω:', albumId);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–ª—å–±–æ–º–∞:', error);
      toast({
        title: "‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è",
        description: "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∞–ª—å–±–æ–º",
        variant: "destructive",
      });
    }
  };

  const addTrackToAlbum = async (albumId: string, trackData: Omit<Track, 'id'>) => {
    try {
      const newTrack: Track = {
        ...trackData,
        id: Date.now().toString(),
        albumId
      };
      
      console.log('üöÄüöÄüöÄ [addTrackToAlbum] –ü–ï–†–ï–î saveTrackToServer, —Ç—Ä–µ–∫:', {
        title: newTrack.title,
        hasFile: !!newTrack.file,
        fileLength: newTrack.file?.length || 0,
        filePreview: newTrack.file?.substring(0, 50)
      });
      
      await apiClient.saveTrackToServer(newTrack);
      
      await loadAlbums();
      
      toast({
        title: "‚úÖ –¢—Ä–µ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω",
        description: `–¢—Ä–µ–∫ "${newTrack.title}" –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö`,
      });
      
      console.log('‚úÖ –¢—Ä–µ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ');
      
      window.dispatchEvent(new CustomEvent('tracksUpdated'));
      window.dispatchEvent(new CustomEvent('albumsUpdated'));
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç—Ä–µ–∫–∞:', error);
      toast({
        title: "‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è",
        description: "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç—Ä–µ–∫ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö",
        variant: "destructive",
      });
      throw error;
    }
  };

  const moveTrack = (trackId: string, fromAlbumId: string, toAlbumId: string) => {
    const sourceAlbum = albums.find(album => album.id === fromAlbumId);
    const trackToMove = sourceAlbum?.trackList.find(track => track.id === trackId);
    
    if (!trackToMove) return;

    const updatedAlbums = albums.map(album => {
      if (album.id === fromAlbumId) {
        return {
          ...album,
          trackList: album.trackList.filter(track => track.id !== trackId)
        };
      }
      if (album.id === toAlbumId) {
        return {
          ...album,
          trackList: [...album.trackList, trackToMove]
        };
      }
      return album;
    });

    setAlbums(updatedAlbums);
    window.dispatchEvent(new CustomEvent('albumsUpdated'));
  };

  return {
    albums,
    setAlbums,
    addNewAlbum,
    editAlbum,
    removeAlbum,
    addTrackToAlbum,
    moveTrack
  };
};