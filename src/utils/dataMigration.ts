import { musicApi } from './musicApi';
import { Album, Track } from '@/types';

interface MigrationResult {
  success: boolean;
  albumsMigrated: number;
  tracksMigrated: number;
  errors: string[];
}

export const migrateLocalStorageToDatabase = async (): Promise<MigrationResult> => {
  const result: MigrationResult = {
    success: true,
    albumsMigrated: 0,
    tracksMigrated: 0,
    errors: []
  };

  try {
    console.log('üîÑ –ù–∞—á–∞–ª–æ –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ localStorage –≤ –ë–î...');

    const localAlbums = localStorage.getItem('albums');
    const localTracks = localStorage.getItem('uploadedTracks');

    if (!localAlbums && !localTracks) {
      console.log('‚ÑπÔ∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ –≤ localStorage');
      return result;
    }

    const dbAlbums = await musicApi.getAlbums();
    console.log(`üìä –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É–∂–µ –µ—Å—Ç—å ${dbAlbums.length} –∞–ª—å–±–æ–º–æ–≤`);

    if (localAlbums) {
      try {
        const albums: Album[] = JSON.parse(localAlbums);
        console.log(`üì¶ –ù–∞–π–¥–µ–Ω–æ ${albums.length} –∞–ª—å–±–æ–º–æ–≤ –≤ localStorage`);

        for (const album of albums) {
          try {
            const existsInDb = dbAlbums.find(a => a.id === album.id || a.title === album.title);
            
            if (!existsInDb) {
              console.log(`‚ûï –ú–∏–≥—Ä–∞—Ü–∏—è –∞–ª—å–±–æ–º–∞: ${album.title}`);
              
              const albumToMigrate = {
                title: album.title,
                artist: album.artist,
                cover: album.cover || '',
                price: album.price || 0,
                description: album.description || '',
                tracks: album.tracks || 0,
                trackList: []
              };

              await musicApi.createAlbum(albumToMigrate);
              result.albumsMigrated++;

              if (album.trackList && album.trackList.length > 0) {
                console.log(`  üìù –ú–∏–≥—Ä–∞—Ü–∏—è ${album.trackList.length} —Ç—Ä–µ–∫–æ–≤ –∏–∑ –∞–ª—å–±–æ–º–∞...`);
                
                const createdAlbums = await musicApi.getAlbums();
                const createdAlbum = createdAlbums.find(a => a.title === album.title);
                
                if (createdAlbum) {
                  for (const track of album.trackList) {
                    try {
                      await musicApi.createTrack({
                        albumId: createdAlbum.id,
                        title: track.title,
                        duration: track.duration,
                        file: track.file || '',
                        price: track.price || 0,
                        cover: track.cover || ''
                      });
                      result.tracksMigrated++;
                      console.log(`    ‚úÖ –¢—Ä–µ–∫: ${track.title}`);
                    } catch (error) {
                      const errorMsg = `–û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ —Ç—Ä–µ–∫–∞ ${track.title}: ${error}`;
                      console.error(`    ‚ùå ${errorMsg}`);
                      result.errors.push(errorMsg);
                    }
                  }
                }
              }
            } else {
              console.log(`‚è≠Ô∏è –ê–ª—å–±–æ–º "${album.title}" —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –ë–î, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
            }
          } catch (error) {
            const errorMsg = `–û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ –∞–ª—å–±–æ–º–∞ ${album.title}: ${error}`;
            console.error(`‚ùå ${errorMsg}`);
            result.errors.push(errorMsg);
          }
        }
      } catch (error) {
        const errorMsg = `–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∞–ª—å–±–æ–º–æ–≤: ${error}`;
        console.error(errorMsg);
        result.errors.push(errorMsg);
      }
    }

    if (localTracks) {
      try {
        const tracks: Track[] = JSON.parse(localTracks);
        console.log(`üéµ –ù–∞–π–¥–µ–Ω–æ ${tracks.length} –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Ç—Ä–µ–∫–æ–≤ –≤ localStorage`);

        const allDbAlbums = await musicApi.getAlbums();

        for (const track of tracks) {
          try {
            const albumInDb = allDbAlbums.find(a => a.id === track.albumId);
            
            if (albumInDb) {
              const trackExistsInAlbum = albumInDb.trackList?.some(t => 
                t.title === track.title && t.duration === track.duration
              );

              if (!trackExistsInAlbum) {
                console.log(`‚ûï –ú–∏–≥—Ä–∞—Ü–∏—è —Ç—Ä–µ–∫–∞: ${track.title} –≤ –∞–ª—å–±–æ–º ${albumInDb.title}`);
                await musicApi.createTrack({
                  albumId: albumInDb.id,
                  title: track.title,
                  duration: track.duration,
                  file: track.file || '',
                  price: track.price || 0,
                  cover: track.cover || ''
                });
                result.tracksMigrated++;
              }
            } else {
              console.warn(`‚ö†Ô∏è –ê–ª—å–±–æ–º –¥–ª—è —Ç—Ä–µ–∫–∞ "${track.title}" –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î`);
            }
          } catch (error) {
            const errorMsg = `–û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ —Ç—Ä–µ–∫–∞ ${track.title}: ${error}`;
            console.error(`‚ùå ${errorMsg}`);
            result.errors.push(errorMsg);
          }
        }
      } catch (error) {
        const errorMsg = `–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ç—Ä–µ–∫–æ–≤: ${error}`;
        console.error(errorMsg);
        result.errors.push(errorMsg);
      }
    }

    if (result.errors.length > 0) {
      result.success = false;
    }

    console.log('\n‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
    console.log(`üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:`);
    console.log(`  - –ê–ª—å–±–æ–º–æ–≤ –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ: ${result.albumsMigrated}`);
    console.log(`  - –¢—Ä–µ–∫–æ–≤ –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ: ${result.tracksMigrated}`);
    console.log(`  - –û—à–∏–±–æ–∫: ${result.errors.length}`);

    if (result.success && (result.albumsMigrated > 0 || result.tracksMigrated > 0)) {
      console.log('\nüîí –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ localStorage –ø–µ—Ä–µ–¥ –æ—á–∏—Å—Ç–∫–æ–π...');
      const backup = {
        albums: localAlbums,
        tracks: localTracks,
        timestamp: new Date().toISOString(),
        migrationResult: result
      };
      localStorage.setItem('migration_backup', JSON.stringify(backup));
      
      console.log('‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ migration_backup');
      console.log('‚ÑπÔ∏è localStorage –¥–∞–Ω–Ω—ã–µ –º–æ–∂–Ω–æ –æ—á–∏—Å—Ç–∏—Ç—å –≤—Ä—É—á–Ω—É—é –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏');
    }

    return result;

  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏:', error);
    result.success = false;
    result.errors.push(`–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error}`);
    return result;
  }
};

export const clearLocalStorageAfterMigration = () => {
  const backup = localStorage.getItem('migration_backup');
  
  if (!backup) {
    console.warn('‚ö†Ô∏è –ù–µ—Ç —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –º–∏–≥—Ä–∞—Ü–∏–∏. –û—á–∏—Å—Ç–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.');
    return false;
  }

  try {
    const backupData = JSON.parse(backup);
    console.log('üóëÔ∏è –û—á–∏—Å—Ç–∫–∞ localStorage –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –º–∏–≥—Ä–∞—Ü–∏–∏...');
    console.log(`üìä –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è –æ—Ç: ${backupData.timestamp}`);
    
    localStorage.removeItem('albums');
    localStorage.removeItem('uploadedTracks');
    
    console.log('‚úÖ localStorage –æ—á–∏—â–µ–Ω. –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ migration_backup');
    return true;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ localStorage:', error);
    return false;
  }
};

export const restoreFromBackup = () => {
  const backup = localStorage.getItem('migration_backup');
  
  if (!backup) {
    console.error('‚ùå –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    return false;
  }

  try {
    const backupData = JSON.parse(backup);
    
    if (backupData.albums) {
      localStorage.setItem('albums', backupData.albums);
    }
    if (backupData.tracks) {
      localStorage.setItem('uploadedTracks', backupData.tracks);
    }
    
    console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏');
    console.log(`üìä –î–∞—Ç–∞ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: ${backupData.timestamp}`);
    return true;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏:', error);
    return false;
  }
};

export const checkMigrationStatus = async (): Promise<{
  needsMigration: boolean;
  localAlbumsCount: number;
  localTracksCount: number;
  dbAlbumsCount: number;
  dbTracksCount: number;
}> => {
  const localAlbums = localStorage.getItem('albums');
  const localTracks = localStorage.getItem('uploadedTracks');
  
  const localAlbumsCount = localAlbums ? JSON.parse(localAlbums).length : 0;
  const localTracksCount = localTracks ? JSON.parse(localTracks).length : 0;
  
  const dbAlbums = await musicApi.getAlbums();
  const dbAlbumsCount = dbAlbums.length;
  const dbTracksCount = dbAlbums.reduce((sum, album) => sum + (album.trackList?.length || 0), 0);
  
  const needsMigration = (localAlbumsCount > 0 || localTracksCount > 0) && 
                         (localAlbumsCount > dbAlbumsCount || localTracksCount > dbTracksCount);
  
  return {
    needsMigration,
    localAlbumsCount,
    localTracksCount,
    dbAlbumsCount,
    dbTracksCount
  };
};
