import { saveAudioToIndexedDB } from './audioStorage';
import { apiClient } from './apiClient';

export const saveAudioFile = async (file: File, filename: string, trackData: { title: string; duration: string }): Promise<string> => {
  try {
    console.log('üíæ –ù–∞—á–∏–Ω–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞:', filename);
    
    const fileId = await saveAudioToIndexedDB(file, filename);
    console.log('‚úÖ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ IndexedDB:', fileId);
    
    const reader = new FileReader();
    const audioDataUrl = await new Promise<string>((resolve, reject) => {
      reader.onload = () => resolve(reader.result as string);
      reader.onerror = () => reject(new Error('–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞'));
      reader.readAsDataURL(file);
    });
    
    console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ—Ñ–∞–π–ª –Ω–∞ —Å–µ—Ä–≤–µ—Ä...');
    await apiClient.saveMediaToServer(fileId, file.type, audioDataUrl);
    console.log('‚úÖ –ê—É–¥–∏–æ—Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä');
    
    const trackInfo = {
      id: Date.now().toString(),
      title: trackData.title,
      duration: trackData.duration,
      file: fileId,
      price: 129
    };

    const savedTracks = localStorage.getItem('uploadedTracks');
    let uploadedTracks = [];
    if (savedTracks) {
      uploadedTracks = JSON.parse(savedTracks);
    }
    uploadedTracks.push(trackInfo);
    localStorage.setItem('uploadedTracks', JSON.stringify(uploadedTracks));

    window.dispatchEvent(new CustomEvent('tracksUpdated'));
    
    return fileId;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞:', error);
    throw new Error(`–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞: ${error}`);
  }
};

export const generateAudioFilename = (originalName: string, trackTitle: string): string => {
  // –û—á–∏—â–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–∞ –æ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
  const cleanTitle = trackTitle
    .toLowerCase()
    .replace(/[^a-z–∞-—è—ë0-9\s]/gi, '')
    .replace(/\s+/g, '_')
    .trim();
  
  // –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
  const extension = originalName.split('.').pop() || 'mp3';
  
  // –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
  const timestamp = Date.now();
  
  return `${cleanTitle}_${timestamp}.${extension}`;
};

export const createAudioDirectory = () => {
  // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã –∑–∞–ø—Ä–æ—Å –∫ —Å–µ—Ä–≤–µ—Ä—É –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
  // –í –±—Ä–∞—É–∑–µ—Ä–Ω–æ–π –≤–µ—Ä—Å–∏–∏ —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —Å–ª—É–∂–∏—Ç –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
  console.log('–°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ /public/audio/ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤');
};

export const validateAudioFile = (file: File): { isValid: boolean; error?: string } => {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
  if (!file.type.startsWith('audio/')) {
    return { isValid: false, error: '–í—ã–±—Ä–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–º' };
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (–º–∞–∫—Å–∏–º—É–º 50–ú–ë)
  const maxSize = 50 * 1024 * 1024; // 50MB
  if (file.size > maxSize) {
    return { isValid: false, error: '–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç 50–ú–ë' };
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
  const supportedTypes = ['audio/mp3', 'audio/mpeg', 'audio/wav', 'audio/ogg', 'audio/aac', 'audio/m4a'];
  if (!supportedTypes.some(type => file.type === type || file.name.toLowerCase().includes(type.split('/')[1]))) {
    return { isValid: false, error: '–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: MP3, WAV, OGG, AAC, M4A' };
  }
  
  return { isValid: true };
};