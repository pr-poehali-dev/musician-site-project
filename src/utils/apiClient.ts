import { Album, Track } from '@/types';

const API_URL = 'https://functions.poehali.dev/25aac639-cf81-4eb7-80fc-aa9a157a25e6';

export const apiClient = {
  async saveTrackToServer(track: Track): Promise<void> {
    // –ù–∞ —Å–µ—Ä–≤–µ—Ä –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ (–ë–ï–ó –∞—É–¥–∏–æ - —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π —Ñ–∞–π–ª)
    const requestData = {
      id: track.id,
      album_id: track.albumId || '',
      title: track.title,
      duration: track.duration,
      file: '', // –ê—É–¥–∏–æ –ù–ï —Å–æ—Ö—Ä–∞–Ω—è–µ–º (—Ç–æ–ª—å–∫–æ –≤ –ø–∞–º—è—Ç–∏ –±—Ä–∞—É–∑–µ—Ä–∞)
      price: track.price,
      cover: track.cover || '',
      track_order: 0
    };
    
    console.log('üì§ [saveTrackToServer] –ù–∞—á–∏–Ω–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç—Ä–µ–∫–∞');
    console.log('üì§ [saveTrackToServer] URL:', `${API_URL}?path=track`);
    console.log('üì§ [saveTrackToServer] –î–∞–Ω–Ω—ã–µ:', requestData);
    
    try {
      const response = await fetch(`${API_URL}?path=track`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(requestData)
      });
      
      console.log('üì• [saveTrackToServer] –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç, —Å—Ç–∞—Ç—É—Å:', response.status);
      
      if (!response.ok) {
        const errorText = await response.text();
        console.error('‚ùå [saveTrackToServer] –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', response.status, errorText);
        throw new Error(`–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç—Ä–µ–∫–∞: ${response.status} - ${errorText}`);
      }
      
      const result = await response.json();
      console.log('‚úÖ [saveTrackToServer] –¢—Ä–µ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ:', result);
    } catch (error) {
      console.error('‚ùå [saveTrackToServer] –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏:', error);
      throw error;
    }
  },

  async saveAlbumToServer(album: Album): Promise<void> {
    const response = await fetch(`${API_URL}?path=album`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        id: album.id,
        title: album.title,
        artist: album.artist,
        cover: '', // –ù–ï –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–ª–æ–∂–∫—É (—Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π —Ä–∞–∑–º–µ—Ä)
        price: album.price,
        description: album.description || ''
      })
    });
    
    if (!response.ok) {
      throw new Error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–ª—å–±–æ–º–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ');
    }
    
    console.log('‚úÖ –ê–ª—å–±–æ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö:', album.title);
  },

  async deleteAlbumFromServer(albumId: string): Promise<void> {
    const response = await fetch(`${API_URL}?path=album&id=${albumId}`, {
      method: 'DELETE'
    });
    
    if (!response.ok) {
      throw new Error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∞–ª—å–±–æ–º–∞ —Å —Å–µ—Ä–≤–µ—Ä–∞');
    }
    
    console.log('‚úÖ –ê–ª—å–±–æ–º —É–¥–∞–ª–µ–Ω –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', albumId);
  },

  async updateAlbumOnServer(albumId: string, albumData: Omit<Album, 'id'>): Promise<void> {
    const response = await fetch(`${API_URL}?path=album`, {
      method: 'PUT',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        id: albumId,
        title: albumData.title,
        artist: albumData.artist,
        cover: '', // –ù–ï –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–ª–æ–∂–∫—É (—Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π —Ä–∞–∑–º–µ—Ä)
        price: albumData.price,
        description: albumData.description || ''
      })
    });
    
    if (!response.ok) {
      throw new Error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–ª—å–±–æ–º–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ');
    }
    
    console.log('‚úÖ –ê–ª—å–±–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:', albumId);
  },

  async loadAlbumsFromServer(): Promise<Album[]> {
    try {
      const response = await fetch(`${API_URL}?path=albums`);
      if (!response.ok) return [];
      
      const albums = await response.json();
      console.log('üì¶ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∞–ª—å–±–æ–º–æ–≤ —Å —Å–µ—Ä–≤–µ—Ä–∞:', albums.length);
      
      const processedAlbums = await Promise.all(albums.map(async (album: any) => {
        let coverUrl = album.cover || '';
        console.log(`üé® –ê–ª—å–±–æ–º "${album.title}" - –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è –æ–±–ª–æ–∂–∫–∞:`, coverUrl);
        
        if (coverUrl && coverUrl.startsWith('cover_')) {
          console.log(`‚è≥ –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±–ª–æ–∂–∫—É ${coverUrl} –∏–∑ –ë–î...`);
          const mediaData = await this.getMediaFile(coverUrl);
          if (mediaData) {
            coverUrl = mediaData;
            console.log(`‚úÖ –û–±–ª–æ–∂–∫–∞ ${coverUrl.substring(0, 30)}... –∑–∞–≥—Ä—É–∂–µ–Ω–∞`);
          } else {
            console.warn(`‚ö†Ô∏è –û–±–ª–æ–∂–∫–∞ ${coverUrl} –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–∞—Å—å`);
          }
        }
        
        const processedTracks = (album.trackList || []).map((track: any) => {
          const trackCover = track.cover || coverUrl;
          
          return {
            id: track.id,
            title: track.title,
            duration: track.duration,
            file: '', // –ê—É–¥–∏–æ –Ω–µ –∑–∞–≥—Ä—É–∂–∞–µ–º —Å —Å–µ—Ä–≤–µ—Ä–∞ (—Ö—Ä–∞–Ω–∏—Ç—Å—è —Ç–æ–ª—å–∫–æ –ª–æ–∫–∞–ª—å–Ω–æ)
            price: track.price,
            cover: trackCover,
            albumId: album.id
          };
        });
        
        return {
          id: album.id,
          title: album.title,
          artist: album.artist,
          tracks: album.tracks_count || 0,
          price: album.price,
          cover: coverUrl,
          description: album.description,
          trackList: processedTracks
        };
      }));
      
      return processedAlbums;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–ª—å–±–æ–º–æ–≤:', error);
      return [];
    }
  },

  async getStats(): Promise<any> {
    try {
      const response = await fetch(`${API_URL}?path=stats`);
      if (!response.ok) {
        throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
      }
      
      const data = await response.json();
      console.log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞:', data);
      return data;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
      throw error;
    }
  },

  async getMediaFile(mediaId: string): Promise<string> {
    try {
      if (!mediaId || mediaId.length < 5) {
        return '';
      }

      console.log(`üîç –ó–∞–≥—Ä—É–∑–∫–∞ –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞ ${mediaId} —Å —Å–µ—Ä–≤–µ—Ä–∞...`);

      const response = await fetch(`${API_URL}?path=media&id=${mediaId}`);
      if (!response.ok) {
        console.warn(`‚ö†Ô∏è –ú–µ–¥–∏–∞—Ñ–∞–π–ª ${mediaId} –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ`);
        return '';
      }

      const data = await response.json();
      const mediaData = data.data || '';
      
      if (mediaData) {
        console.log(`‚úÖ –ú–µ–¥–∏–∞—Ñ–∞–π–ª ${mediaId} –∑–∞–≥—Ä—É–∂–µ–Ω (${Math.round(mediaData.length / 1024)} KB)`);
      }
      
      return mediaData;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞:', error);
      return '';
    }
  },


};