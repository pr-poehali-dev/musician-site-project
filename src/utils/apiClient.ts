import { Album, Track } from '@/types';

const API_URL = 'https://functions.poehali.dev/25aac639-cf81-4eb7-80fc-aa9a157a25e6';

export const apiClient = {
  async saveMediaFile(mediaId: string, fileType: string, data: string): Promise<string> {
    console.log(`üì§ [saveMediaFile] –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ ${fileType} —Ñ–∞–π–ª–∞ ${mediaId}, —Ä–∞–∑–º–µ—Ä: ${data.length} chars`);
    
    const response = await fetch(`${API_URL}?path=media`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        id: mediaId,
        file_type: fileType,
        data: data
      })
    });
    
    if (!response.ok) {
      const errorText = await response.text();
      console.error(`‚ùå [saveMediaFile] –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞:`, errorText);
      throw new Error(`–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞: ${response.status}`);
    }
    
    console.log(`‚úÖ [saveMediaFile] –ú–µ–¥–∏–∞—Ñ–∞–π–ª ${mediaId} —Å–æ—Ö—Ä–∞–Ω—ë–Ω`);
    return mediaId;
  },

  async saveTrackToServer(track: Track): Promise<void> {
    console.log('üì§ [saveTrackToServer] ========== –ù–ê–ß–ê–õ–û ==========');
    console.log('üì§ [saveTrackToServer] –í—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–∫:', {
      id: track.id,
      title: track.title,
      hasFile: !!track.file,
      fileLength: track.file?.length || 0,
      filePreview: track.file?.substring(0, 50)
    });
    
    // –ï—Å–ª–∏ —Ñ–∞–π–ª –±–æ–ª—å—à–æ–π (>1MB base64), —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ –æ—Ç–¥–µ–ª—å–Ω–æ
    let fileId = track.file || '';
    if (track.file && track.file.length > 100) {
      console.log('üì§ [saveTrackToServer] –§–∞–π–ª –±–æ–ª—å—à–æ–π, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ...');
      fileId = `audio_${track.id}`;
      
      try {
        await this.saveMediaFile(fileId, 'audio', track.file);
        console.log('‚úÖ [saveTrackToServer] –ê—É–¥–∏–æ—Ñ–∞–π–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω –æ—Ç–¥–µ–ª—å–Ω–æ:', fileId);
      } catch (error) {
        console.error('‚ùå [saveTrackToServer] –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞—É–¥–∏–æ:', error);
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∞—É–¥–∏–æ—Ñ–∞–π–ª');
      }
    }
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Ç—Ä–µ–∫–∞ —Å ID —Ñ–∞–π–ª–∞ –≤–º–µ—Å—Ç–æ base64
    const requestData = {
      id: track.id,
      album_id: track.albumId || '',
      title: track.title,
      duration: track.duration,
      file: fileId, // –¢–µ–ø–µ—Ä—å —ç—Ç–æ ID —Ñ–∞–π–ª–∞, –∞ –Ω–µ base64
      price: track.price,
      cover: track.cover || '',
      track_order: 0
    };
    
    console.log('üì§ [saveTrackToServer] URL:', `${API_URL}?path=track`);
    console.log('üì§ [saveTrackToServer] –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏:', {
      id: requestData.id,
      album_id: requestData.album_id,
      title: requestData.title,
      duration: requestData.duration,
      file: requestData.file.startsWith('audio_') ? `${requestData.file} (ID)` : 'EMPTY',
      price: requestData.price,
      cover: requestData.cover.length > 100 ? `${requestData.cover.substring(0, 30)}... (${requestData.cover.length} chars)` : requestData.cover || 'EMPTY',
      track_order: requestData.track_order
    });
    
    try {
      const jsonBody = JSON.stringify(requestData);
      const bodySizeMB = (jsonBody.length / 1024 / 1024).toFixed(2);
      console.log(`üì§ [saveTrackToServer] –†–∞–∑–º–µ—Ä JSON —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞: ${bodySizeMB} MB`);
      
      if (jsonBody.length > 3000000) {
        console.error('‚ùå [saveTrackToServer] JSON —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–ª–µ cover');
        throw new Error('–†–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç Cloud Functions (3MB)');
      }
      
      // –î–ª—è –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º keepalive
      const controller = new AbortController();
      const timeoutId = setTimeout(() => controller.abort(), 60000); // 60 —Å–µ–∫—É–Ω–¥
      
      const response = await fetch(`${API_URL}?path=track`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: jsonBody,
        keepalive: true,
        signal: controller.signal
      });
      
      clearTimeout(timeoutId);
      
      console.log('üì• [saveTrackToServer] –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç, —Å—Ç–∞—Ç—É—Å:', response.status);
      
      if (!response.ok) {
        const errorText = await response.text();
        console.error('‚ùå [saveTrackToServer] –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', response.status, errorText);
        throw new Error(`–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç—Ä–µ–∫–∞: ${response.status} - ${errorText}`);
      }
      
      const result = await response.json();
      console.log('‚úÖ [saveTrackToServer] –¢—Ä–µ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ:', result);
    } catch (error) {
      console.error('‚ùå [saveTrackToServer] –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏:', error);
      throw error;
    }
  },

  async saveAlbumToServer(album: Album): Promise<void> {
    const albumData: any = {
      id: album.id,
      title: album.title,
      artist: album.artist,
      price: album.price,
      description: album.description || ''
    };
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–ª–æ–∂–∫—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
    if (album.cover && album.cover.length > 0) {
      albumData.cover = album.cover;
    }
    
    const response = await fetch(`${API_URL}?path=album`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(albumData)
    });
    
    if (!response.ok) {
      throw new Error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–ª—å–±–æ–º–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ');
    }
    
    console.log('‚úÖ –ê–ª—å–±–æ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö:', album.title);
  },

  async deleteAlbumFromServer(albumId: string): Promise<void> {
    const response = await fetch(`${API_URL}?path=album&id=${albumId}`, {
      method: 'DELETE'
    });
    
    if (!response.ok) {
      throw new Error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∞–ª—å–±–æ–º–∞ —Å —Å–µ—Ä–≤–µ—Ä–∞');
    }
    
    console.log('‚úÖ –ê–ª—å–±–æ–º —É–¥–∞–ª–µ–Ω –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', albumId);
  },

  async updateAlbumOnServer(albumId: string, albumData: Omit<Album, 'id'>): Promise<void> {
    const updateData: any = {
      id: albumId,
      title: albumData.title,
      artist: albumData.artist,
      price: albumData.price,
      description: albumData.description || ''
    };
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–ª–æ–∂–∫—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
    if (albumData.cover && albumData.cover.length > 0) {
      updateData.cover = albumData.cover;
    }
    
    const response = await fetch(`${API_URL}?path=album`, {
      method: 'PUT',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(updateData)
    });
    
    if (!response.ok) {
      throw new Error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–ª—å–±–æ–º–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ');
    }
    
    console.log('‚úÖ –ê–ª—å–±–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:', albumId);
  },

  async loadAlbumsFromServer(): Promise<Album[]> {
    try {
      const response = await fetch(`${API_URL}?path=albums`);
      if (!response.ok) return [];
      
      const albums = await response.json();
      console.log('üì¶ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∞–ª—å–±–æ–º–æ–≤ —Å —Å–µ—Ä–≤–µ—Ä–∞:', albums.length);
      
      const processedAlbums = await Promise.all(albums.map(async (album: any) => {
        let coverUrl = album.cover || '';
        console.log(`üé® –ê–ª—å–±–æ–º "${album.title}" - –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è –æ–±–ª–æ–∂–∫–∞:`, coverUrl);
        
        if (coverUrl && coverUrl.startsWith('cover_')) {
          console.log(`‚è≥ –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±–ª–æ–∂–∫—É ${coverUrl} –∏–∑ –ë–î...`);
          const mediaData = await this.getMediaFile(coverUrl);
          if (mediaData) {
            coverUrl = mediaData;
            console.log(`‚úÖ –û–±–ª–æ–∂–∫–∞ ${coverUrl.substring(0, 30)}... –∑–∞–≥—Ä—É–∂–µ–Ω–∞`);
          } else {
            console.warn(`‚ö†Ô∏è –û–±–ª–æ–∂–∫–∞ ${coverUrl} –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–∞—Å—å`);
          }
        }
        
        const processedTracks = await Promise.all((album.trackList || []).map(async (track: any) => {
          const trackCover = track.cover || coverUrl;
          
          // –ó–∞–≥—Ä—É–∂–∞–µ–º –∞—É–¥–∏–æ—Ñ–∞–π–ª –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
          let audioFile = track.file || '';
          if (audioFile && audioFile.startsWith('audio_')) {
            const audioData = await this.getMediaFile(audioFile);
            if (audioData) {
              audioFile = audioData;
            }
          }
          
          const processedTrack = {
            id: track.id,
            title: track.title,
            duration: track.duration,
            file: audioFile,
            price: track.price,
            cover: trackCover,
            albumId: album.id,
            plays_count: track.plays_count || 0
          };
          
          console.log(`üéµ –¢—Ä–µ–∫ "${track.title}" - plays_count:`, track.plays_count);
          
          return processedTrack;
        }));
        
        return {
          id: album.id,
          title: album.title,
          artist: album.artist,
          tracks: album.tracks_count || 0,
          price: album.price,
          cover: coverUrl,
          description: album.description,
          trackList: processedTracks
        };
      }));
      
      return processedAlbums;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–ª—å–±–æ–º–æ–≤:', error);
      return [];
    }
  },

  async getStats(): Promise<any> {
    try {
      const response = await fetch(`${API_URL}?path=stats`);
      if (!response.ok) {
        throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
      }
      
      const data = await response.json();
      console.log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞:', data);
      return data;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
      throw error;
    }
  },

  async resetStats(): Promise<void> {
    try {
      const token = localStorage.getItem('authToken');
      if (!token) {
        throw new Error('–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –≤ –∞–¥–º–∏–Ω–∫—É –∑–∞–Ω–æ–≤–æ.');
      }

      const response = await fetch(`https://functions.poehali.dev/52119c2a-82db-4422-894d-e3d5db04d16a?path=stats/reset`, {
        method: 'DELETE',
        headers: {
          'X-Auth-Token': token,
          'Content-Type': 'application/json'
        }
      });

      if (response.status === 401) {
        localStorage.removeItem('authToken');
        throw new Error('–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –≤ –∞–¥–º–∏–Ω–∫—É –∑–∞–Ω–æ–≤–æ.');
      }

      if (!response.ok) {
        throw new Error('–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
      }

      console.log('üîÑ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤ –ë–î —Å–±—Ä–æ—à–µ–Ω–∞');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
      throw error;
    }
  },

  async getMediaFile(mediaId: string): Promise<string> {
    try {
      if (!mediaId || mediaId.length < 5) {
        return '';
      }

      console.log(`üîç –ó–∞–≥—Ä—É–∑–∫–∞ –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞ ${mediaId} —Å —Å–µ—Ä–≤–µ—Ä–∞...`);

      const response = await fetch(`${API_URL}?path=media&id=${mediaId}`);
      if (!response.ok) {
        console.warn(`‚ö†Ô∏è –ú–µ–¥–∏–∞—Ñ–∞–π–ª ${mediaId} –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ`);
        return '';
      }

      const data = await response.json();
      const mediaData = data.data || '';
      
      if (mediaData) {
        console.log(`‚úÖ –ú–µ–¥–∏–∞—Ñ–∞–π–ª ${mediaId} –∑–∞–≥—Ä—É–∂–µ–Ω (${Math.round(mediaData.length / 1024)} KB)`);
      }
      
      return mediaData;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞:', error);
      return '';
    }
  },


};